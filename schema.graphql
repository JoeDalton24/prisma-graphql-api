# import PostOrderByInput,UserOrderByInput,CommentOrderByInput from "./src/generated/prisma.graphql"

type Query {
  users(query: ID, first: Int, skip: Int, orderBy: UserOrderByInput): [User!]!
  posts(
    query: String
    first: Int
    skip: Int
    orderBy: PostOrderByInput
  ): [Post!]!
  comments(first: Int, skip: Int, orderBy: CommentOrderByInput): [Comment!]!
  post(postId: ID!): Post!
  me: User!
}

type Mutation {
  createUser(data: CreateUserInput!): AuthPayload!
  deleteUser: User!
  updateUser(data: updateUserInput!): User!
  createPost(data: CreatePostInput!): Post!
  deletePost(postId: ID!): Post!
  updatePost(postId: ID!, data: UpdatePostInput!): Post!
  createComment(data: CreateCommentInput!): Comment!
  deleteComment(commentId: ID!): Comment!
  updateComment(data: UpdateCommentInput!, commentId: ID!): Comment!
  login(data: LoginInput!): AuthPayload!
}

type Subscription {
  comment(postId: ID!): CommentSubscriptionPayload!
  post: PostSubscriptionPayload!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}
input updateUserInput {
  name: String
  email: String
  password: String
}

input CreatePostInput {
  title: String!
  body: String!
  published: Boolean!
}
input UpdatePostInput {
  title: String
  body: String
  published: Boolean
}

input CreateCommentInput {
  text: String!
  post: ID!
}

input UpdateCommentInput {
  text: String
}
input LoginInput {
  email: String!
  password: String!
}

type User {
  id: ID!
  name: String!
  email: String
  password: String!
  posts: [Post!]!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

type Post {
  id: ID!
  title: String!
  body: String!
  published: Boolean!
  author: User!
  comments: [Comment!]!
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: ID!
  text: String!
  author: User!
  post: Post!
  createdAt: String!
  updatedAt: String!
}

type PostSubscriptionPayload {
  mutation: String!
  node: Post
}
type CommentSubscriptionPayload {
  mutation: String!
  node: Comment
}

type AuthPayload {
  user: User!
  token: String!
}
